{"version":3,"sources":["bots.tsx","engine.tsx","App.tsx","index.tsx","styles.module.scss"],"names":["uciWorker","file","actions","worker","Worker","resolver","addEventListener","e","move","data","match","from","to","fen","Promise","resolve","reject","postMessage","forEach","action","Bots","Random","moves","Chess","verbose","Math","floor","random","length","setTimeout","newGame","isBlackTurn","turn","isWhiteTurn","BotSelector","playerName","availableBots","selectedBot","setSelectedBot","disabled","className","styles","value","name","onChange","target","Object","keys","map","History","history","endRef","useRef","useEffect","current","scrollIntoView","color","piece","san","join","ref","App","bots","onGameCompleted","useState","isPlaying","setPlaying","engine","setFen","setHistory","whiteBot","setWhiteBot","blackBot","setBlackBot","doMove","useCallback","game","promotion","newFen","game_over","in_checkmate","isBotMovePlayable","then","TopNav","Button","onClick","playing","Chessboard","position","allowDrag","sourceSquare","isWhiteBotTurn","isBlackBotTurn","square","onDrop","targetSquare","ReactDOM","render","StrictMode","winner","global","alert","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.455b9a83.chunk.js","sourcesContent":["import Chess from 'chess.js';\nimport type { Fen, ShortMove } from './engine';\n\nexport type UninitialisedBot = () => InitialisedBot;\nexport type InitialisedBot = (fen: Fen) => Promise<ShortMove>;\nexport type AvailableBots = { [name: string]: UninitialisedBot };\n\nconst randomMove: UninitialisedBot = () => fen =>\n  new Promise(resolve => {\n    const moves = Chess(fen).moves({ verbose: true });\n    const { from, to } = moves[Math.floor(Math.random() * moves.length)];\n    setTimeout(() => resolve({ from, to }), 500);\n  });\n\nconst uciWorker = (file: string, actions: Array<string>): UninitialisedBot => () => {\n  const worker = new Worker(file);\n\n  let resolver: ((move: ShortMove) => void) | null = null;\n\n  worker.addEventListener('message', e => {\n    const move = e.data.match(/^bestmove\\s([a-h][1-8])([a-h][1-8])/);\n    if (move && resolver) {\n      resolver({ from: move[1], to: move[2] });\n      resolver = null;\n    }\n  });\n\n  return fen =>\n    new Promise((resolve, reject) => {\n      if (resolver) {\n        reject('Pending move is present');\n        return;\n      }\n\n      resolver = resolve;\n      worker.postMessage('ucinewgame');\n      worker.postMessage(`position fen ${fen}`);\n      actions.forEach(action => worker.postMessage(action));\n    });\n};\n\nconst Bots: AvailableBots = {\n  Random: randomMove,\n  'nmrugg/stockfish (l:1,d:10)': uciWorker('bots/stockfish.js-10.0.2/stockfish.js', [\n    'setoption name Skill Level value 1',\n    'go depth 10',\n  ]),\n  'nmrugg/stockfish (l:20,d:10)': uciWorker('bots/stockfish.js-10.0.2/stockfish.js', [\n    'setoption name Skill Level value 20',\n    'go depth 10',\n  ]),\n  'nmrugg/stockfish (l:20,t:1s)': uciWorker('bots/stockfish.js-10.0.2/stockfish.js', [\n    'setoption name Skill Level value 20',\n    'go movetime 1000',\n  ]),\n  'op12no2/lozza (l:1,d:10)': uciWorker('bots/lozza-1.18/lozza.js', [\n    'setoption name Skill Level value 1',\n    'go depth 10',\n  ]),\n  'op12no2/lozza (l:20,d:10)': uciWorker('bots/lozza-1.18/lozza.js', [\n    'setoption name Skill Level value 20',\n    'go depth 10',\n  ]),\n  'op12no2/lozza (l:20,t:1s)': uciWorker('bots/lozza-1.18/lozza.js', [\n    'setoption name Skill Level value 20',\n    'go movetime 1000',\n  ]),\n};\n\nexport default Bots;\n","import Chess from 'chess.js';\nimport type { Square, Move, ShortMove } from 'chess.js';\n\nexport type Fen = string;\nexport type GameWinner = 'b' | 'w' | null;\nexport type { Square, Move, ShortMove };\n\nexport const newGame = (): Fen => 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n\nexport const isNewGame = (fen: Fen): boolean => fen === newGame();\n\nexport const isBlackTurn = (fen: Fen): boolean => Chess(fen).turn() === 'b';\n\nexport const isWhiteTurn = (fen: Fen): boolean => Chess(fen).turn() === 'w';\n\nexport const isCheck = (fen: Fen): boolean => Chess(fen).in_check();\n\nexport const getGameWinner = (fen: Fen): GameWinner => {\n  const game = Chess(fen);\n  return game.in_checkmate() ? (game.turn() === 'w' ? 'b' : 'w') : null;\n};\n\nexport const isGameOver = (fen: Fen): boolean => Chess(fen).game_over();\n\nexport const isMoveable = (fen: Fen, from: Square): boolean =>\n  new Chess(fen).moves({ square: from }).length > 0;\n\nexport const move = (fen: Fen, from: Square, to: Square): [Fen, Move] | null => {\n  const game = Chess(fen);\n  const action = game.move({ from, to, promotion: 'q' });\n  return action ? [game.fen(), action] : null;\n};\n","import React, { useState, useEffect, useRef, useCallback, ChangeEvent } from 'react';\nimport Chessboard from 'chessboardjsx';\nimport * as engine from './engine';\nimport type { AvailableBots, InitialisedBot } from './bots';\nimport styles from './styles.module.scss';\n\ntype SelectedBot = {\n  name: string;\n  move: InitialisedBot;\n} | null;\n\ntype BoardMove = {\n  sourceSquare: engine.Square;\n  targetSquare: engine.Square;\n};\n\nconst BotSelector: React.FC<{\n  playerName: string;\n  availableBots: AvailableBots;\n  selectedBot: SelectedBot;\n  setSelectedBot: (bot: SelectedBot) => void;\n  disabled: boolean;\n}> = ({ playerName, availableBots, selectedBot, setSelectedBot, disabled }) => {\n  const handleChange = (e: ChangeEvent<HTMLSelectElement>): void => {\n    const name = e.target.value;\n    setSelectedBot(name ? { name, move: availableBots[name]() } : null);\n  };\n\n  return (\n    <div className={styles.BotSelector}>\n      <label>{playerName}</label>\n      <select value={selectedBot?.name} onChange={handleChange} disabled={disabled}>\n        <option value=\"\" key=\"User\">\n          User\n        </option>\n        {Object.keys(availableBots).map(name => (\n          <option key={name}>{name}</option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nconst History: React.FC<{ history: Array<engine.Move> }> = ({ history }) => {\n  const endRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    endRef.current?.scrollIntoView();\n  }, [history]);\n\n  return (\n    <pre className={styles.History}>\n      {history.map(({ color, piece, from, san }) => `${color}${piece}${from} ${san}`).join('\\n')}\n      <div ref={endRef} />\n    </pre>\n  );\n};\n\nconst App: React.FC<{\n  bots: AvailableBots;\n  onGameCompleted: (winner: engine.GameWinner) => void;\n}> = ({ bots, onGameCompleted }) => {\n  const [isPlaying, setPlaying] = useState<boolean>(false);\n  const [fen, setFen] = useState<engine.Fen>(engine.newGame);\n  const [history, setHistory] = useState<Array<engine.Move>>([]);\n  const [whiteBot, setWhiteBot] = useState<SelectedBot>(null);\n  const [blackBot, setBlackBot] = useState<SelectedBot>(null);\n\n  const newGame = () => {\n    setPlaying(false);\n    setFen(engine.newGame);\n    setHistory([]);\n  };\n\n  const doMove = useCallback(\n    (fen: engine.Fen, from: engine.Square, to: engine.Square) => {\n      const move = engine.move(fen, from, to);\n\n      if (!move) {\n        return;\n      }\n\n      const [newFen, action] = move;\n\n      if (engine.isGameOver(newFen)) {\n        onGameCompleted(engine.getGameWinner(newFen));\n        newGame();\n        return;\n      }\n\n      setFen(newFen);\n      setHistory(history => [...history, action]);\n    },\n    [onGameCompleted]\n  );\n\n  const onDragStart = ({ sourceSquare: from }: Pick<BoardMove, 'sourceSquare'>) => {\n    const isWhiteBotTurn = whiteBot && engine.isWhiteTurn(fen);\n    const isBlackBotTurn = blackBot && engine.isBlackTurn(fen);\n\n    return isPlaying && engine.isMoveable(fen, from) && !(isWhiteBotTurn || isBlackBotTurn);\n  };\n\n  const onMovePiece = ({ sourceSquare: from, targetSquare: to }: BoardMove) => {\n    doMove(fen, from, to);\n  };\n\n  useEffect(() => {\n    if (!isPlaying) {\n      return;\n    }\n\n    let isBotMovePlayable = true;\n\n    if (whiteBot && engine.isWhiteTurn(fen)) {\n      whiteBot.move(fen).then(({ from, to }: engine.ShortMove) => {\n        if (isBotMovePlayable) doMove(fen, from, to);\n      });\n    }\n\n    if (blackBot && engine.isBlackTurn(fen)) {\n      blackBot.move(fen).then(({ from, to }: engine.ShortMove) => {\n        if (isBotMovePlayable) doMove(fen, from, to);\n      });\n    }\n\n    return () => {\n      isBotMovePlayable = false;\n    };\n  }, [isPlaying, fen, whiteBot, blackBot, doMove]);\n\n  return (\n    <div className={styles.App}>\n      <header>\n        <h1>♛ Chessbot</h1>\n      </header>\n      <div className={styles.TopNav}>\n        <BotSelector\n          playerName=\"White\"\n          availableBots={bots}\n          selectedBot={whiteBot}\n          setSelectedBot={setWhiteBot}\n          disabled={isPlaying}\n        />\n        <BotSelector\n          playerName=\"Black\"\n          availableBots={bots}\n          selectedBot={blackBot}\n          setSelectedBot={setBlackBot}\n          disabled={isPlaying}\n        />\n        <button className={styles.Button} onClick={() => setPlaying(playing => !playing)}>\n          {isPlaying ? 'Pause' : 'Play'}\n        </button>\n        <button className={styles.Button} onClick={newGame}>\n          Reset\n        </button>\n      </div>\n      <div className={styles.Chessboard}>\n        <Chessboard position={fen} allowDrag={onDragStart} onDrop={onMovePiece} />\n      </div>\n      <History history={history} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport bots from './bots';\nimport './new-1.1.3.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App\n      bots={bots}\n      onGameCompleted={winner => {\n        global.alert(\n          `${winner === 'b' ? 'Black' : winner === 'w' ? 'White' : 'No one'} is the winner!`\n        );\n      }}\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"styles_App__fFNuF\",\"TopNav\":\"styles_TopNav__3Zi02\",\"Button\":\"styles_Button__3HbKX\",\"BotSelector\":\"styles_BotSelector__1sHbn\",\"Chessboard\":\"styles_Chessboard__owj1A\",\"History\":\"styles_History__7Rgl8\"};"],"sourceRoot":""}